enum Bank {
  NuBank
  Inter
  Itau
  Bradesco
}

enum InvoiceStatus {
  OPENED_CURRENTURRENT
  OPENED_FUTUREUTURE
  CLOSED
  DELAYED
  PAID
}

enum ExpenseType {
  credit_card
  debit
}

enum ExpenseStatus {
  PENDING
  PAID
}

enum ExpenseCategory {
  NAO_INFORMADO
  SAUDE
  LAZER
  ACADEMICO
  DIVERSAO
  COMIDA
  CASA
  ROUPAS
  PETS
  UBER
  INVESTIMENTO
  ACADEMIA
}

# Common types
type Message {
  message: String!
}

type Success {
  errors: [Message]!
  success: Message
}

type Query {
  # Credit Card queries
  findCreditCardById(id: Int!): CreditCardResponse!
  findAllCreditCards: MultipleCreditCardsResponse!

  # Subscription queries
  findSubscriptionById(id: Int!): SubscriptionResponse!

  # Invoice queries
  findInvoiceById(id: Int!): InvoiceResponse!

  # Expense queries
  findExpenseById(id: Int!): ExpenseResponse!
  findExpenseByFilters(
    fromMonth: String!
    toMonth: String
    category: ExpenseCategory
    name: String
    priceRange: [Int!]
    status: ExpenseStatus
    creditCardId: Int
  ): MultipleExpensesResponse!
}

type Mutation {
  # Credit Card Mutations
  createCreditCard(
    nickname: String!
    bank: Bank!
    limit: Float!
    closingDay: Int!
    dueDay: Int!
  ): CreditCardResponse!
  updateCreditCard(
    creditCardId: Int!
    nickname: String
    bank: Bank
    limit: Float
    closingDay: Int
    dueDay: Int
  ): CreditCardResponse!
  deleteCreditCard(creditCardId: Int!): Success!

  # Subscription mutations
  createSubscription(
    name: String!
    price: Float!
    creditCardId: Int!
  ): SubscriptionResponse!
  updateSubscription(
    id: Int!
    name: String
    price: Float
  ): SubscriptionResponse!
  deleteSubscription(subscriptionId: Int!): Success!

  # Invoice mutations
  payInvoice(invoiceId: Int!): Success!

  # Expense mutations
  createExpense(
    creditCardId: Int
    expenseType: ExpenseType!
    installments: Int
    name: String!
    price: Float!
    category: ExpenseCategory!
    expenseDate: String!
  ): ExpenseResponse!
  payExpense(expenseId: Int!): Success!
  deleteExpense(expenseId: Int!): Success!
}

# Credit card related types
type CreditCard {
  id: ID!
  nickname: String!
  bank: Bank!
  limit: Float!
  closing_day: Int!
  due_day: Int!
  created_at: String!
  invoice: [Invoice]
  subscription: [SubscriptionType]
  expense: [Expense]
}

type CreditCardResponse {
  errors: [Message]!
  creditCard: CreditCard
}

type MultipleCreditCardsResponse {
  errors: [Message]!
  creditCards: [CreditCard!]
}

# Invoice related types
type Invoice {
  id: ID!
  current_price: Float!
  closing_date: String!
  due_date: String!
  status: InvoiceStatus!
  created_at: String!
  credit_card: CreditCard!
  expense: [Expense]
}

type InvoiceResponse {
  errors: [Message]!
  invoice: Invoice
}

# Subscription related types
type SubscriptionType {
  id: ID!
  name: String!
  price: Float!
  created_at: String!
  credit_card: CreditCard!
}

type SubscriptionResponse {
  errors: [Message]!
  subscription: SubscriptionType
}

# Expense related types
type Expense {
  id: ID!
  expense_type: ExpenseType!
  installments_number: Int
  name: String!
  price: Float!
  status: ExpenseStatus!
  category: ExpenseCategory!
  expense_date: String!
  credit_card: CreditCard
  invoice: Invoice
}

type ExpenseResponse {
  errors: [Message]!
  expense: Expense
}

type MultipleExpensesResponse {
  errors: [Message]!
  expenses: [Expense!]
}
